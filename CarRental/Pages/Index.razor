@page "/"
@using CarRental.Common.Extensions
@using CarRental.Business.Classes 
@inject BookingProcessor b


<PageTitle>Car Rental</PageTitle>

<h1 class="display-4">Car Rental</h1>

@* <div class="alert alert-danger" role="alert" style="display: @(string.IsNullOrEmpty(errorMessage) ? "none" : "block")">
    @errorMessage
</div> *@

<div>
    <div class="heading-font display-6">Vehicles</div>
    <table class="table border">
        <thead>
            <tr>
                <th scope="col" class="bg-black text-secondary">RegNo</th>
                <th scope="col" class="bg-black text-secondary">Make</th>
                <th scope="col" class="bg-black text-secondary">Odometer</th>
                <th scope="col" class="bg-black text-secondary">Cost Km</th>
                <th scope="col" class="bg-black text-secondary">Vehicle Type</th>
                <th scope="col" class="bg-black text-secondary">$ Day</th>
                <th scope="col" class="bg-black text-secondary">Action</th>
                <th class="bg-black text-secondary"></th>
                <th scope="col" class="bg-black text-secondary">Status</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><input class="form-control" placeholder="RegNo" @bind="RegNo" disabled="@isTaskDelayInProgress" /></td>
                <td><input class="form-control" placeholder="Make" @bind="Make" disabled="@isTaskDelayInProgress" /></td>
                <td><input class="form-control" placeholder="0" @bind="Odometer" disabled="@isTaskDelayInProgress" /></td>
                <td><input class="form-control" placeholder="0" @bind="CostKm" disabled="@isTaskDelayInProgress" /></td>
                <td>
                    <select class="form-control" @bind="SelectedVehicleType" disabled="@isTaskDelayInProgress">
                        <option value="">-- Select Type --</option>
                        @foreach (var typeName in b.GetVehicleTypes())
                        {
                            <option value="@typeName">@typeName</option>
                        }
                    </select>
                </td>
                <td></td>
                <td><button @onclick="AddVehicleToData" class="btn btn-sm btn-outline-success" disabled="@isTaskDelayInProgress">Add</button></td>
                <td></td>
                <td>@if (isTaskDelayInProgress){<label class="btn-sm btn-warning text-light">Processing</label>}</td>
            </tr>
            @foreach (var vehicle in b.GetVehicles())
            {     
                <tr>
                    <th scope="row" class="align-middle">@vehicle.RegNo</th>
                    <td class="align-middle">@vehicle.Make</td>
                    <td class="align-middle">@vehicle.Odometer</td>
                    <td class="align-middle">@vehicle.CostKm</td>
                    <td class="align-middle">@vehicle.VehicleType</td>
                    <td class="align-middle">@vehicle.DayCost()</td>

                    <td>
                        @if (vehicle.VehicleStatus == Common.Enums.VehicleStatuses.Available)
                        {
                            <select class="form-control" @bind="selectedCustomerId" disabled="@isTaskDelayInProgress">
                                <option value="0" placeholder="Select Customer"></option>
                                @foreach (var person in b.GetPersons())
                                {
                                    <option value="@person.Id">@($"{person.FirstName} {person.LastName} ({person.SocialSecurityNumber})")</option>
                                }
                            </select>
                        }
                        @if(vehicle.VehicleStatus == Common.Enums.VehicleStatuses.Booked)
                        {
                            <input class="form-control" placeholder="Distance" @bind="Distance" disabled="@isTaskDelayInProgress" />
                        }
                    </td>
                    
                    <td>
                        @if (vehicle.VehicleStatus == Common.Enums.VehicleStatuses.Available)
                        {
                            <button @onclick="() => RentVehicleAsync(vehicle.Id)" class="btn btn-sm btn-outline-primary" disabled="@isTaskDelayInProgress">Rent</button>
                        }
                        @if (vehicle.VehicleStatus == Common.Enums.VehicleStatuses.Booked)
                        {
                            <button @onclick="() => ReturnVehicle(vehicle.Id, Distance)" class="btn btn-sm btn-outline-success" disabled="@isTaskDelayInProgress">Return</button>
                        }
                    </td> 

                    <td>
                        <label class=@(vehicle.VehicleStatus == Common.Enums.VehicleStatuses.Booked ? "btn-sm btn-danger" : "btn-sm btn-dark")>@vehicle.VehicleStatus</label>
                    </td>                       
                </tr>
            }           
        </tbody>
    </table>
</div>


<div>
    <div class="heading-font display-6">Bookings</div>
    <table class="table border border-secondary">
        <thead>
            <tr>
                <th scope="col" class="bg-black text-secondary">RegNo</th>
                <th scope="col" class="bg-black text-secondary">Customer</th>
                <th scope="col" class="bg-black text-secondary">Km Rented</th>
                <th scope="col" class="bg-black text-secondary">Km Returned</th>
                <th scope="col" class="bg-black text-secondary">Rented</th>
                <th scope="col" class="bg-black text-secondary">Returned</th>
                <th scope="col" class="bg-black text-secondary">Cost</th>
                <th scope="col" class="bg-black text-secondary">Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in b.GetBookings())
            {
                <tr>
                    <th scope="row" class="align-middle">@booking.Vehicle.RegNo</th>
                    <td class="align-middle">@($"{booking.Person.FirstName} {booking.Person.LastName} ({booking.Person.SocialSecurityNumber})")</td>
                    <td class="align-middle">@booking.Odometer</td>
                    <td class="align-middle">
                        @if (booking.Distance.HasValue)
                        {
                            @(booking.Odometer + booking.Distance.Value)
                        }
                    </td>
                    <td class="align-middle">@booking.BookingDate.ToShortDateString()</td>
                    <td class="align-middle">@(booking.ReturnDate?.ToShortDateString() ?? "")</td>
                    <td class="align-middle">
                        @{
                            booking.CalculateTotalCost(booking.Vehicle.DayCost(), booking.Vehicle.CostKm);
                            if(booking.TotalCost != null)
                            {
                                @booking.TotalCost.Value.ToString("F2")    
                            }
                        }
                    </td>
                    <td>
                        <label class=@(booking.VehicleBookingStatus == Common.Enums.VehicleBookingStatuses.Closed ? "btn-sm btn-danger" : "btn-sm btn-success")>@booking.VehicleBookingStatus</label>
                    </td>
                </tr> 
            }
        </tbody>
    </table>
</div>

<div class="col-6">
    <div class="heading-font display-6">Customers</div>
    <table class="table border border-secondary">
        <thead>
            <tr>
                <th scope="col" class="bg-black text-secondary">SSN</th>
                <th scope="col" class="bg-black text-secondary">Last Name</th>
                <th scope="col" class="bg-black text-secondary">First Name</th>
                <th class="bg-black text-secondary"></th>
            </tr>          
        </thead>
        <tbody>
            <tr>
                <td><input @bind="b.Customer.SocialSecurityNumber" class="form-control" placeholder="SSN" /></td>
                <td><input @bind="b.Customer.LastName" class="form-control" placeholder="Last Name" /></td>
                <td><input @bind="b.Customer.FirstName" class="form-control" placeholder="First Name" /></td>
                <td><button @onclick="AddCustomerToData" class="btn btn-sm btn-outline-success">Add</button></td>
            </tr>
            @foreach(var person in b.GetPersons())
            {
                <tr>
                    <th scope="row">@person.SocialSecurityNumber</th>
                    <td>@person.LastName</td>
                    <td>@person.FirstName</td>
                    <td></td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code{
    private bool isTaskDelayInProgress = false;

    private int selectedCustomerId = 0;
    private string? errorMessage = null;
    private int? Distance;
    private string? RegNo;
    private string? Make;
    private double? Odometer;
    private double? CostKm;
    private string? SelectedVehicleType;

    private void ShowErrorMessage(string message)
    {
        errorMessage = message;
    }

    private async Task RentVehicleAsync(int vehicleId)
    {
        if (vehicleId != 0 && selectedCustomerId != 0)
        {
            var selectedCustomer = b.GetPerson(selectedCustomerId);

            if (selectedCustomer != null)
            {
                try
                {
                    isTaskDelayInProgress = true;
                    StateHasChanged();

                    var booking = await b.RentVehicle(vehicleId, selectedCustomer.Id);

                    if (booking != null)
                    {
                        selectedCustomerId = 0;
                    }
                    else
                    {
                        ShowErrorMessage("Booking failed");
                    }
                }
                catch (Exception ex)
                {
                    ShowErrorMessage($"Error while renting vehicle: {ex.Message}");
                }
                finally
                {
                    await Task.Delay(5000);
                    isTaskDelayInProgress = false;
                    StateHasChanged();
                }
            }
            else
            {
                ShowErrorMessage("Selected customer not found");
            }
        }
    }

    private void ReturnVehicle(int vehicleId, int? distance)
    {
        if (vehicleId != 0)
        {
            if (distance.HasValue)
            {
                try
                {
                    b.ReturnVehicle(vehicleId, distance.Value);
                    Distance = null;
                }
                catch (Exception ex)
                {
                    ShowErrorMessage($"Error while returning vehicle: {ex.Message}");
                }
            }
            else
            {
                ShowErrorMessage("Please enter a valid distance before returning the vehicle.");
            }
        }
    }

    private void AddVehicleToData()
    {
        if(!string.IsNullOrWhiteSpace(RegNo) && !string.IsNullOrWhiteSpace(Make) && Odometer.HasValue && CostKm.HasValue && !string.IsNullOrEmpty(SelectedVehicleType))
        {
            var vehicleTypeEnum = b.GetVehicleType(SelectedVehicleType);
            b.AddVehicle(RegNo, Make, (int)Odometer.Value, CostKm.Value, vehicleTypeEnum);

            RegNo = "";
            Make = "";
            Odometer = null;
            CostKm = null;
            SelectedVehicleType = null;
        }

    }

    private void AddCustomerToData()
    {
        if (b.Customer.SocialSecurityNumber != null && b.Customer.LastName != null && b.Customer.FirstName != null)
        {
            b.AddCustomer(b.Customer.SocialSecurityNumber, b.Customer.LastName, b.Customer.FirstName);
            b.Customer.SocialSecurityNumber = "";
            b.Customer.LastName = "";
            b.Customer.FirstName = "";
        }
    }
}
