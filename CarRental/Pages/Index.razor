@page "/"
@using CarRental.Common.Extensions
@using CarRental.Common.Interfaces @* Temporär *@
@using CarRental.Business.Classes 
@inject BookingProcessor b


<PageTitle>Car Rental</PageTitle>

<h1 class="display-3">Car Rental</h1>

@*<div class="alert alert-danger" role="alert">
    A simple danger alert—check it out!
</div>*@

<div>
    <div class="heading-font display-6">Vehicles</div>
    <table class="table border">
        <thead>
            <tr>
                <th scope="col" class="bg-black text-secondary">RegNo</th>
                <th scope="col" class="bg-black text-secondary">Make</th>
                <th scope="col" class="bg-black text-secondary">Odometer</th>
                <th scope="col" class="bg-black text-secondary">Cost Km</th>
                <th scope="col" class="bg-black text-secondary">Vehicle Type</th>
                <th scope="col" class="bg-black text-secondary">$ Day</th>
                <th scope="col" class="bg-black text-secondary">Action</th>
                <th class="bg-black text-secondary"></th>
                <th scope="col" class="bg-black text-secondary">Status</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><input class="form-control" placeholder="RegNo" @bind="RegNo" /></td>
                <td><input class="form-control" placeholder="Make" @bind="Make" /></td>
                <td><input class="form-control" placeholder="0" @bind="Odometer" /></td>
                <td><input class="form-control" placeholder="0" @bind ="CostKm" /></td>
                <td>
                    <select class="form-control" @bind="SelectedVehicleType">
                        <option value="">-- Select Type --</option>
                        @foreach (var typeName in b.GetVehicleTypes())
                        {
                            <option value="@typeName">@typeName</option>
                        }
                    </select>
                </td>
                <td></td>
                <td><button @onclick="AddVehicleToData" class="btn-sm">Add</button></td>
                <td></td>
                @*<td><label class="btn-sm btn-warning text-light">Processing</label></td>*@
            </tr>
            @foreach (var vehicle in b.GetVehicles())
            {
                IPerson? customerForVehicle = null;
                if (vehicleCustomerDictionary.TryGetValue(vehicle, out customerForVehicle))
                {
                    @if (customerForVehicle != null)
                    {
                        <p>Selected Customer: @GetCustomerInfo(customerForVehicle)</p>
                    }
                    else
                    {
                        <p>No customer selected for this vehicle.</p>
                    }
                }
                
                <tr>
                    <th scope="row" class="align-middle">@vehicle.RegNo</th>
                    <td class="align-middle">@vehicle.Make</td>
                    <td class="align-middle">@vehicle.Odometer</td>
                    <td class="align-middle">@vehicle.CostKm</td>
                    <td class="align-middle">@vehicle.VehicleType</td>
                    <td class="align-middle">@vehicle.DayCost()</td>
                    <td>
                        <select class="form-control" @bind="selectedCustomerId">
                            <option value="0"></option>
                            @foreach(var person in b.GetPersons())
                            {
                                <option value="@person.CustomerId">@($"{person.FirstName} {person.LastName} ({person.CustomerId})")</option>
                            }
                        </select> 
                    </td>
                    
                    <td>
                        @if (vehicle.VehicleStatus == CarRental.Common.Enums.VehicleStatuses.Available)
                        {
                            <button @onclick="() => RentVehicle(customerForVehicle?.CustomerId, vehicle.Id)" class="btn-sm">Rent</button>
                        }
                        @if (vehicle.VehicleStatus == CarRental.Common.Enums.VehicleStatuses.Booked)
                        {
                            <button @onclick="() => ReturnVehicle(vehicle.Id)" class="btn-sm">Return</button>
                            <input class="form-control" placeholder="Distance" @bind="Distance" />
                        }
                    </td> 
                    <td>
                        <label class=@(vehicle.VehicleStatus == Common.Enums.VehicleStatuses.Booked ? "btn-sm btn-danger" : "btn-sm btn-dark")>@vehicle.VehicleStatus</label>
                    </td>                       
                </tr>
            }           
        </tbody>
    </table>
</div>


<div>
    <div class="heading-font display-6">Bookings</div>
    <table class="table border border-secondary">
        <thead>
            <tr>
                <th scope="col" class="bg-black text-secondary">RegNo</th>
                <th scope="col" class="bg-black text-secondary">Customer</th>
                <th scope="col" class="bg-black text-secondary">Km Rented</th>
                <th scope="col" class="bg-black text-secondary">Km Returned</th>
                <th scope="col" class="bg-black text-secondary">Rented</th>
                <th scope="col" class="bg-black text-secondary">Returned</th>
                <th scope="col" class="bg-black text-secondary">Cost</th>
                <th scope="col" class="bg-black text-secondary">Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in b.GetBookings())
            {
                <tr>
                    <th scope="row" class="align-middle">@booking.Vehicle.RegNo</th>
                    <td class="align-middle">@($"{booking.Person.FirstName} {booking.Person.LastName} ({booking.Person.CustomerId})")</td>
                    <td class="align-middle">@booking.Odometer</td>
                    <td class="align-middle">@booking.Distance</td>
                    <td class="align-middle">@booking.BookingDate.ToShortDateString()</td>
                    <td class="align-middle">@(booking.ReturnDate?.ToShortDateString() ?? "")</td>
                    <td class="align-middle">
                    @{if (booking.TotalCost != null){@booking.TotalCost.Value.ToString("F2")} }
                    </td>
                    <td>
                        <label class=@(booking.VehicleBookingStatus == Common.Enums.VehicleBookingStatuses.Closed ? "btn-sm btn-danger" : "btn-sm btn-success")>@booking.VehicleBookingStatus</label>
                    </td>
                </tr> 
            }
        </tbody>
    </table>
</div>

<div class="col-6">
    <div class="heading-font display-6">Customers</div>
    <table class="table border border-secondary">
        <thead>
            <tr>
                <th scope="col" class="bg-black text-secondary">SSN</th>
                <th scope="col" class="bg-black text-secondary">Last Name</th>
                <th scope="col" class="bg-black text-secondary">First Name</th>
                <th class="bg-black text-secondary"></th>
            </tr>          
        </thead>
        <tbody>
            <tr>
                <td><input @bind="customerId" class="form-control" placeholder="SSN" /></td>
                <td><input @bind="lastName" class="form-control" placeholder="Last Name" /></td>
                <td><input @bind="firstName" class="form-control" placeholder="First Name" /></td>
                <td><button @onclick="AddCustomerToData" class="btn-sm">Add</button></td>
            </tr>
            @foreach(var person in b.GetPersons())
            {
                <tr>
                    <th scope="row">@person.CustomerId</th>
                    <td>@person.LastName</td>
                    <td>@person.FirstName</td>
                    <td></td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="alert alert-danger" role="alert" style="display: @(string.IsNullOrEmpty(errorMessage) ? "none" : "block")">
    @errorMessage
</div>
@code{
    private int SelectedPerson = 0;
    
    private int selectedCustomerId = 0;
    private string? errorMessage = null;
    //
    private string GetCustomerInfo(IPerson customer)
    {
        if (customer != null)
        {
            return $"{customer.FirstName} {customer.LastName} ({customer.CustomerId})";
        }
        else
        {
            return "No customer selected for this vehicle.";
        }
    }

    private Dictionary<IVehicle, IPerson?> vehicleCustomerDictionary;

    protected override void OnInitialized()
    {
        vehicleCustomerDictionary = b.GetVehicleCustomerDictionary();
    }

    private int? Distance;
    private CarRental.Common.Interfaces.IVehicle? SelectedVehicle { get; set; }

    //
    private void ShowErrorMessage(string message)
    {
        errorMessage = message;
    }
    private string? RegNo;
    private string? Make;
    private double? Odometer;
    private double? CostKm;
    private string? SelectedVehicleType;

    private int? customerId;
    private string? lastName;
    private string? firstName;

    private void ReturnVehicle(int vehicleId)
    {
        if (Distance.HasValue)
        {
            try
            {
                b.ReturnVehicle(vehicleId, Distance.Value);

                var selectedVehicle = b.GetVehicle(vehicleId);
                if (selectedVehicle != null)
                {
                    selectedVehicle.VehicleStatus = CarRental.Common.Enums.VehicleStatuses.Available;
                    selectedVehicle.Odometer = (double)(Distance.HasValue ? Distance.Value : selectedVehicle.Odometer);
                    vehicleCustomerDictionary[selectedVehicle] = null;
                }
            }
            catch (Exception ex)
            {
                ShowErrorMessage("An error occurred: " + ex.Message);
            }
        }
        else
        {
            ShowErrorMessage("Please enter the distance.");
        }
    }

    private void RentVehicle(int? customerId, int vehicleId)
    {
        if (customerId.HasValue)
        {
            var selectedVehicle = b.GetVehicle(vehicleId);

            if (selectedVehicle != null)
            {
                b.RentVehicle(vehicleId, customerId.Value);

                vehicleCustomerDictionary[selectedVehicle] = b.GetPerson(customerId.Value);
            }
            else
            {
                ShowErrorMessage("Selected vehicle not found.");
            }
        }
        else
        {
            ShowErrorMessage("Please select a valid customer.");
        }
    }

    private void AddVehicleToData()
    {
        if(!string.IsNullOrWhiteSpace(RegNo) && !string.IsNullOrWhiteSpace(Make) && Odometer.HasValue && CostKm.HasValue && !string.IsNullOrEmpty(SelectedVehicleType))
        {
            var vehicleTypeEnum = b.GetVehicleType(SelectedVehicleType);
            b.AddVehicle(RegNo, Make, Odometer.Value, CostKm.Value, vehicleTypeEnum, SelectedPerson);

            RegNo = "";
            Make = "";
            Odometer = null;
            CostKm = null;
            SelectedVehicleType = null;

            SelectedPerson = default;
        }

    }

    private void AddCustomerToData()
    {
        if(customerId != null && lastName != null && firstName != null )
        {
            b.AddCustomer(customerId.Value, lastName, firstName);
            customerId = null;
            lastName = "";
            firstName = "";
        }
    }
    // BLäääääh "Please select a valid customer."
}
